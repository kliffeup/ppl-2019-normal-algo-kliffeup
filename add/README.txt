							Приветствую, Пользователь!
   Перед Вами - симуляция работы "Нормальных алгорифмов", позволяющих при помощи серии подстановок получить из одной строки - другую.                                                   
   Но это лишь очень приблизительный функционал работы "Нормальных алгорифмов"
   				- с их помощью можно моделировать системы, значительно превосходящие по смыслу "обычную обработку строк".
   Это руководство пояснит, как корректно пользоваться ею.
	
								ВВОД ДАННЫХ
1) Для ввода входной строки, которая будет обрабатываться, и последовательности преобразований над ней необходимо перейти в файл 'Input.txt'

2) Первая строка в этом файле отведена для ввода входной строки - здесь можно вводить любую последовательность символов, даже пустую,
   поскольку пустая строка - тоже строка :-)
3) Ввод последовательности преобразований - и здесь имеется несколько важных правил, которые после повлияют на работу программы:

а) В качестве разделителя левой части преобразования - то, что Вы хотите найти и изменить в рабочей строке, и правой - то, что Вы хотите
   сделать над этим вхождением в эту строку, выступает специльный символ " # "; его необходимо прописывать в каждое преобразование.

б) В "марковских подстановках" имеется специльный символ "эпсилон большая", обозначающий пустую строку и делающий следующее:
 - если он стоит в левой части преобразования, то в начало рабочей строки необходимо вставить 'правая_часть_преобразования';
 - если он стоит в правой части преобразования, то из рабочей строки необходимо исключить первое вхождение 'левая_часть_преобразования', если она там имеется;
 - если он стоит в обеих частях преобразования, то с рабочей строкой ничего не произойдет;
   В моей эмуляции такой символ тоже имеется, только в качестве "пустой строки" здесь выступает одиночный символ '*' (звёздочка)
   К сожалению, это вносит определенное сужение функционала изменения - а вдруг захочется что-то сделать в строке со "звездочкой"???
   Да, в рамках моей симуляции "*" - зарезервированный под "пустую строку" символ, и используется он в том же контексте.
   Поэтому НАСТОЯТЕЛЬНО НЕ РЕКОМЕНДУЕТСЯ в преобразованиях употреблять одинокую "*" никак иначе, как в смысле "пустой строки".

   А теперь немного примеров работы с "пустой строкой" в моей программе:
   
   Пример: применение подстановки "* # qwe" сделает из строки "rty" строку "qwerty";
   Пример: применение подстановки "qwe # *" сделает из строки "qwerty" строку "rty";
   Пример: применение подстановки "haha # *" сделает из строки "qwerty" строку "qwerty" - ведь "haha" не входит в строку "qwerty";
   Пример: применение подстановки "* # *" сделает из строки "qwerty" строку "qwerty";

в) В "марковских подстановках" также имеется понятие "финальной подстановки" - если подстановка финальная, то после её выполнения 
   серия подстановок прекращается и строка окончательно "преборазуется".
   Под финальной подстановкой как в "марковских подстановках", так и в программе воспринимается правая часть некоторого преобразования,
   начинающаяся с '.'(точка).
   В силу особенности программы также НЕ РЕКОМЕНДУЕТСЯ использовать "точку" в начале правой части преобразования никак иначе,
   как идентификация данной подстановки в качестве "финальной подстановки".
   Примеры "финальных подстановок":
   q # .w
   qwe # .*
   dada # .ya
   * # .end

г) НЕ ОСТАВЛЯЙТЕ пустое пространство между строкой и преобразованиями/другими преобразованиями посредством перевода строки - это 
   чревато сбоем программы, ПИШИТЕ все входные данные ПОСТРОЧНО ПОДРЯД!
   Пример правильного ввода данных - да, это скрин файла 'Input.txt' в момент ввода данных, вставленный в Блокнот:

|||||||||||||||||||||||||||||||||||||||||||||||
|inf — Блокнот
|||||||||||||||||||||||||||||||||||||||||||||||
| Файл | Правка | Формат | Вид | Справка |
|||||||||||||||||||||||||||||||||||||||||||||||
|qwerty
|q # w
|w # .y

   Пример неправильного ввода данных - оставлена строка между входной строкой и первым преобразованием:

|||||||||||||||||||||||||||||||||||||||||||||||
|inf — Блокнот
|||||||||||||||||||||||||||||||||||||||||||||||
| Файл | Правка | Формат | Вид | Справка |
|||||||||||||||||||||||||||||||||||||||||||||||
|qwerty
|
|q # w
|w # .y

   Пример неправильного ввода данных - оставлена строка между первым и вторым преобразованиями:

|||||||||||||||||||||||||||||||||||||||||||||||
|inf — Блокнот
|||||||||||||||||||||||||||||||||||||||||||||||
| Файл | Правка | Формат | Вид | Справка |
|||||||||||||||||||||||||||||||||||||||||||||||
|qwerty
|q # w
|
|w # .y

г) Завершая ввод преобразований, НЕ ПЕРЕВОДИТЕ последнюю строку клавишей "Enter" дважды/трижды/n-жды - все последующие переводы строк после
   последнего преобразования также будут трактоваться программой как некоторые преобразования, но так как заданы они будут некорректно, то
   это поставит "программу" в тупик. Посему перед сохранением файла входных данных лучше всего оставляйте курсор строки на последнем символе последнего преобразования или
   переведите строку ЕДИНОЖДЫ - и программа будет работать корректно.

   Пример правильного оставления курсора строки перед сохранением - [] обозначает текущее положение курсора в файле:

|||||||||||||||||||||||||||||||||||||||||||||||
|inf — Блокнот
|||||||||||||||||||||||||||||||||||||||||||||||
| Файл | Правка | Формат | Вид | Справка |
|||||||||||||||||||||||||||||||||||||||||||||||
|qwerty
|q # w
|w # .y[]

   Пример правильного оставления курсора строки перед сохранением:

|||||||||||||||||||||||||||||||||||||||||||||||
|inf — Блокнот
|||||||||||||||||||||||||||||||||||||||||||||||
| Файл | Правка | Формат | Вид | Справка |
|||||||||||||||||||||||||||||||||||||||||||||||
|qwerty
|q # w
|w # .y
|[]

   Пример неправильного оставления курсора строки перед сохранением - после последнего преобразования строка дважды перевалась клавишей "Enter":

|||||||||||||||||||||||||||||||||||||||||||||||
|inf — Блокнот
|||||||||||||||||||||||||||||||||||||||||||||||
| Файл | Правка | Формат | Вид | Справка |
|||||||||||||||||||||||||||||||||||||||||||||||
|qwerty
|q # w
|w # .y
|
|[]

							КАК ЗАПУСТИТЬ ПРОГРАММУ?
   После ввода данных (надеюсь, корректного) необходимо запустить программу для её реализации, для чего необходимо:
 - открыть файл 'kliffe_normal_algos.py' в предпочительной Вами IDE;
 - нажать кнопку "Run" в верхнем меню и выбрать нажатием из раскрывающегося списка вариант "Run 'kliffeup_normal_algos'" 
   (по крайней мере, на PyCharm'e файл с расширением .py запускается именно так);

   Далее либо код выполнится с кодом 0, что означает успешное выполнение программы, либо что-то пойдет не так и:
 - выведется какая-то ошибка/серия ошибок, после чего стоит пересмотреть, корректно ли были введены данные (инструкция по вводу - выше);
 - в случае уверенности корректности введенных данных стоит сообщить об неправильной работе программы мне на почту: azatvaleev356778@gmail.com
   с пометкой "Normal Algos Program Problem" и описанием введенных Вами данных.

							А ЧТО СТАЛО СО СТРОКОЙ?
   Если программа выполнилась с кодом 0, то можно смело заходить в файл 'Output.txt', где и будет выведен результат работы введённой Вами последовательности
   над введённой Вами строкой. Если ожидания от выходных данных не оправдались, то:
 - перепроверьте, точно ли после введенных Вами исходных данных должно было получиться нечто отличное от результата выполнения программы;
 - перепроверьте корректность введённых Вами данных (инструкция по вводу - выше);
 - при уверенности в первых двух пунктах - обращайтесь мне на почту: azatvaleev356778@gmail.com c пометкой "Normal Algos Output Problem" и описанием вашей проблемы;

					А ЕСЛИ ВВЕСТИ ЗАВЕДОМО ЗАЦИКЛИВАЮЩИЕ РАБОТУ ПРОГРАММЫ ВХОДНЫЕ ДАННЫЕ?
   Такой вариант программы тоже предусмотрен, ведь "нормальный алгорифм" вполне может зациклиться, и программа имеет вывод соответствующего
   сообщения в файле 'outf.txt'. Кроме того, о зацикленности работы может говорить сама программа - если она долго не завершается, и единственный способ
   прекратить её работу - собственноручно. (Run -> выбрать нажатием вариант Stop)
					
								ТЕСТЫ ФУНКЦИЙ
   В рамках программы предусмотрено тестирование 3 функций, использующихся при реализации подстановок.
   Запустить их можно, найдя 3 соответствующих файла, начинающихся с 'unit...'; все они проверяют корректность работы функций на основе
   ожидания возврата определенного значения при указании определенных входных значений в эти функции. 
   При желании эти функции можно дополнить самостоятельно.
   Про сами функции и принцип их работы можно почитать, также найдя в папке 3 соответствующих файла, заканчивающихся на '_function'

								ЗАКЛЮЧЕНИЕ
  Спасибо за использование моей программы, надеюсь, мы вместе сможем добиться максимальной корректности её исполнения.

  Для Вас работал Азат Валеев, студент 1 курса направления "Математика, Алгоритмы и Анализ Данных", факультета "Математика и компьютерные науки" Санкт-Петербургского Государственного университета.													